y = x %*% c(beta_1, beta_2) + rnorm(n, 0, sigma)
pvals_double[i] = summary(lm(y ~ x))$coefficients[2, 4]
}
out_data = data.frame(Predictors = as.factor(c(rep(1, nsims), rep(2, nsims))), pvalue = c(pvals_single, pvals_double))
return(out_data)
}
# Version 1
Sigma = cbind(c(1, 0.5), c(0.5, 1))
out_data <- run_simulation(Sigma)
plot1 <- ggplot(out_data, aes(x = log(pvalue), fill = Predictors)) +
geom_histogram(alpha=0.5, position="identity", bins=30) +
theme_bw()
# Version 2
Sigma = cbind(c(1, 0), c(0, 1))
out_data <- run_simulation(Sigma)
plot2 <- ggplot(out_data, aes(x = log(pvalue), fill = Predictors)) +
geom_histogram(alpha=0.5, position="identity", bins=30) +
theme_bw()
# Version 3
Sigma = cbind(c(1, 0), c(0, 10))
out_data <- run_simulation(Sigma)
plot3 <- ggplot(out_data, aes(x = log(pvalue), fill = Predictors)) +
geom_histogram(alpha=0.5, position="identity", bins=30) +
theme_bw()
ggarrange(plot1, plot2, plot3, ncol = 2, nrow = 2)
prop.test(0.3, 20)
prop.test(12, 20)
18/30
0.6*0.4/30
0.6+1.96*0.008
0.6-1.96*0.008
12/30*18/39*(1/29)
12/30*18/30*(1/29)
0.6+2.0452*0.0083
0.6-2.0452*0.0083
ppois(12, 36)
dpois(12, 36)
ppois(12, 36)
ppois(12, 24)
1-ppois(12, 6)
ppois(12, 18)
1-ppois(12, 9)
ppois(24, 36)
1-ppois(24, 18)
(12-18)/sqrt(18)
(12-9)/sqrt(18)
contrast.test <- function(fit_lm, vec1, vec2) {
beta.hat = coef(fit_lm)
C = vec1 - vec2
t.stat = C %*% beta.hat/sqrt(t(C) %*% vcov(fit_lm) %*% C)
p.value = 2*(1-pt(abs(t.stat),df=fit_lm$df.residual))
return (c("t.stat" = t.stat, "p.value" = p.value, "df" = fit_lm$df.residual))
}
x <- rep(c(0,1), each=10)
y <- 10 * x + rnorm(20, 0, 5)
fit_lm <- lm(y~x)
lm_sum <- summary(fit_lm)
c("t-test" = t.test(y~as.factor(x), alternative="two.sided")$p.value,
"lm" = lm_sum$coefficients[2,4],
"f-test" = pf(lm_sum$fstatistic[1],lm_sum$fstatistic[2],
lm_sum$fstatistic[3],lower.tail=FALSE),
"contrast" = contrast.test(fit_lm, c(0, 1), c(0, 0))[2])
contrast.test <- function(fit_lm, vec1, vec2) {
beta.hat = coef(fit_lm)
C = vec1 - vec2
t.stat = C %*% beta.hat/sqrt(t(C) %*% vcov(fit_lm) %*% C)
p.value = 2*(1-pt(abs(t.stat),df=fit_lm$df.residual))
return (c("t.stat" = t.stat, "p.value" = p.value, "df" = fit_lm$df.residual))
}
x <- rep(c(0,1), each=10)
y <- 10 * x + rnorm(20, 0, 5)
fit_lm <- lm(y~x)
lm_sum <- summary(fit_lm)
c("t-test" = t.test(y~as.factor(x), alternative="two.sided", "pooled")$p.value,
"lm" = lm_sum$coefficients[2,4],
"f-test" = pf(lm_sum$fstatistic[1],lm_sum$fstatistic[2],
lm_sum$fstatistic[3],lower.tail=FALSE),
"contrast" = contrast.test(fit_lm, c(0, 1), c(0, 0))[2])
contrast.test <- function(fit_lm, vec1, vec2) {
beta.hat = coef(fit_lm)
C = vec1 - vec2
t.stat = C %*% beta.hat/sqrt(t(C) %*% vcov(fit_lm) %*% C)
p.value = 2*(1-pt(abs(t.stat),df=fit_lm$df.residual))
return (c("t.stat" = t.stat, "p.value" = p.value, "df" = fit_lm$df.residual))
}
x <- rep(c(0,1), each=10)
y <- 10 * x + rnorm(20, 0, 5)
fit_lm <- lm(y~x)
lm_sum <- summary(fit_lm)
c("t-test" = t.test(y~as.factor(x), alternative="two.sided", var.equal=TRUE)$p.value,
"lm" = lm_sum$coefficients[2,4],
"f-test" = pf(lm_sum$fstatistic[1],lm_sum$fstatistic[2],
lm_sum$fstatistic[3],lower.tail=FALSE),
"contrast" = contrast.test(fit_lm, c(0, 1), c(0, 0))[2])
contrast.test <- function(fit_lm, vec1, vec2) {
beta.hat = coef(fit_lm)
C = vec1 - vec2
t.stat = C %*% beta.hat/sqrt(t(C) %*% vcov(fit_lm) %*% C)
p.value = 2*(1-pt(abs(t.stat),df=fit_lm$df.residual))
return (c("t.stat" = t.stat, "p.value" = p.value, "df" = fit_lm$df.residual))
}
x <- rep(c(0,1), each=10)
y <- 10 * x + rnorm(20, 0, 5)
fit_lm <- lm(y~x)
lm_sum <- summary(fit_lm)
c("t-test" = t.test(y~as.factor(x), alternative="two.sided", var.equal=TRUE)$p.value,
"lm" = lm_sum$coefficients[2,4],
"f-test" = pf(lm_sum$fstatistic[1],lm_sum$fstatistic[2],
lm_sum$fstatistic[3],lower.tail=FALSE),
"contrast" = contrast.test(fit_lm, c(0, 1), c(0, 0))[2])
t.test(rnorm(15, 0.1, 1))$p.value
Sigma <- matrix(0.5, 15, 15)
diag(Sigma) <- 1
for (i in 1:nsims) {
corrolated[i] <- t.test(mvrnorm(1, rep(0, 15), Sigma))$p.value
}
nsims <- 10000
uncorrolated <- vector(length = nsims)
for (i in 1:nsims) {
uncorrolated[i] <- t.test(rnorm(15, 0.1, 1))$p.value
}
corrolated <- vector(length = nsims)
Sigma <- matrix(0.5, 15, 15)
diag(Sigma) <- 1
for (i in 1:nsims) {
corrolated[i] <- t.test(mvrnorm(1, rep(0, 15), Sigma))$p.value
}
mean(uncorrolated)
mean(corrlated)
mean(corrolated)
nsims <- 10000
uncorrolated <- vector(length = nsims)
for (i in 1:nsims) {
uncorrolated[i] <- t.test(rnorm(15, 0.1, 1))$p.value
}
corrolated <- vector(length = nsims)
Sigma <- matrix(0.5, 15, 15)
diag(Sigma) <- 1
for (i in 1:nsims) {
corrolated[i] <- t.test(mvrnorm(1, rep(0, 15), Sigma))$p.value
}
mean(uncorrolated < 0.05)
mean(corrolated < 0.05)
nsims <- 10000
uncorrolated <- vector(length = nsims)
for (i in 1:nsims) {
uncorrolated[i] <- t.test(rnorm(15, 0.1, 1))$p.value
}
corrolated <- vector(length = nsims)
Sigma <- matrix(0.5, 15, 15)
diag(Sigma) <- 1
for (i in 1:nsims) {
corrolated[i] <- t.test(mvrnorm(1, rep(0.1, 15), Sigma))$p.value
}
mean(uncorrolated < 0.05)
mean(corrolated < 0.05)
0.6*0.4/29
sqrt(0.6*0.4/30)
sqrt(0.6*0.4/30)*1.96
0.6-0.1753077
0.6+0.1753077
sqrt(0.6*0.4/29)*2.0452
0.6-sqrt(0.6*0.4/29)*2.0452
sqrt(0.6*0.4/29)
0.6-sqrt(0.6*0.4/29)*2.0452
0.6+sqrt(0.6*0.4/29)*2.0452
pt(0.975, 29)
qt(0.975, 29)
n <- 30
k <- 0:30
phat <- k/n
p <- 0.6
sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1))), choose(n,k) * p^k * (1-p)^(n-k))
abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)))
abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1))
sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)), choose(n,k) * p^k * (1-p)^(n-k))
sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)), choose(n,k) * p^k * (1-p)^(n-k), 0))
ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)), choose(n,k) * p^k * (1-p)^(n-k), 0)
sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)), choose(n,k) * p^k * (1-p)^(n-k), 0))
n <- 30
k <- 0:30
phat <- k/n
p <- 0.6
sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)), choose(n,k) * p^k * (1-p)^(n-k), 0))
n <- 30
k <- 0:30
phat <- k/n
p <- 0.5
sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)), choose(n,k) * p^k * (1-p)^(n-k), 0))
n <- 30
k <- 0:30
phat <- k/n
p <- 0.9
sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)), choose(n,k) * p^k * (1-p)^(n-k), 0))
n <- 30
k <- 0:30
phat <- k/n
p <- 0.99
sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)), choose(n,k) * p^k * (1-p)^(n-k), 0))
n <- 30
k <- 0:30
phat <- k/n
p <- 0.95
sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)), choose(n,k) * p^k * (1-p)^(n-k), 0))
n <- 30
k <- 0:30
phat <- k/n
p <- seq(0, 1, 0.02)
sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)), choose(n,k) * p^k * (1-p)^(n-k), 0))
n <- 30
k <- 0:30
phat <- k/n
ps <- seq(0, 1, 0.02)
result = vector(length=length(ps))
for (i in 1:length(ps)) {
p = ps[i]
result[i] = sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)),
choose(n,k) * p^k * (1-p)^(n-k), 0))
}
plot(ps, result)
n <- 30
k <- 0:30
phat <- k/n
ps <- seq(0, 1, 0.01)
result = vector(length=length(ps))
for (i in 1:length(ps)) {
p = ps[i]
result[i] = sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)),
choose(n,k) * p^k * (1-p)^(n-k), 0))
}
plot(ps, result)
n <- 30
k <- 0:30
phat <- k/n
ps <- seq(0, 1, 0.01)
result = vector(length=length(ps))
for (i in 1:length(ps)) {
p = ps[i]
result[i] = sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)),
choose(n,k) * p^k * (1-p)^(n-k), 0))
}
plot(ps, result)
abline(result ~ ps)
n <- 30
k <- 0:30
phat <- k/n
ps <- seq(0, 1, 0.01)
result = vector(length=length(ps))
for (i in 1:length(ps)) {
p = ps[i]
result[i] = sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)),
choose(n,k) * p^k * (1-p)^(n-k), 0))
}
plot(ps, result)
lines(ps, result, pch = 18, col = "blue", type = "b", lty = 2)
n <- 30
k <- 0:30
phat <- k/n
ps <- seq(0, 1, 0.01)
result = vector(length=length(ps))
for (i in 1:length(ps)) {
p = ps[i]
result[i] = sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)),
choose(n,k) * p^k * (1-p)^(n-k), 0))
}
plot(ps, result)
lines(ps, result, pch = 18, col = "blue", type = "b")
n <- 30
k <- 0:30
phat <- k/n
ps <- seq(0, 1, 0.01)
result = vector(length=length(ps))
for (i in 1:length(ps)) {
p = ps[i]
result[i] = sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)),
choose(n,k) * p^k * (1-p)^(n-k), 0))
}
plot(ps, result)
lines(ps, result, col = "blue", type = "b", lty = 2)
n <- 30
k <- 0:30
phat <- k/n
ps <- seq(0, 1, 0.01)
result = vector(length=length(ps))
for (i in 1:length(ps)) {
p = ps[i]
result[i] = sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)),
choose(n,k) * p^k * (1-p)^(n-k), 0))
}
lines(ps, result, col = "blue", type = "b", lty = 2)
n <- 30
k <- 0:30
phat <- k/n
ps <- seq(0, 1, 0.002)
result = vector(length=length(ps))
for (i in 1:length(ps)) {
p = ps[i]
result[i] = sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)),
choose(n,k) * p^k * (1-p)^(n-k), 0))
}
plot(ps, result)
lines(ps, result, col = "blue", type = "b", lty = 2)
n <- 30
k <- 0:30
phat <- k/n
ps <- seq(0, 1, 0.002)
result = vector(length=length(ps))
for (i in 1:length(ps)) {
p = ps[i]
result[i] = sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)),
choose(n,k) * p^k * (1-p)^(n-k), 0))
}
plot(ps, result)
lines(ps, result, col = "blue", type = "b", lty = 2)
abline(y=0.95)
n <- 30
k <- 0:30
phat <- k/n
ps <- seq(0, 1, 0.002)
result = vector(length=length(ps))
for (i in 1:length(ps)) {
p = ps[i]
result[i] = sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)),
choose(n,k) * p^k * (1-p)^(n-k), 0))
}
plot(ps, result)
lines(ps, result, col = "blue", type = "b", lty = 2)
abline(h=0.95)
n <- 30
k <- 0:30
phat <- k/n
ps <- seq(0, 1, 0.002)
result = vector(length=length(ps))
for (i in 1:length(ps)) {
p = ps[i]
result[i] = sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)),
choose(n,k) * p^k * (1-p)^(n-k), 0))
}
plot(ps, result)
lines(ps, result, col = "blue", type = "b", lty = 2)
abline(h=0.95, col="red")
n <- 30
k <- 0:30
phat <- k/n
ps <- seq(0, 1, 0.002)
coverage_prob = vector(length=length(ps))
for (i in 1:length(ps)) {
p = ps[i]
coverage_prob[i] = sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)),
choose(n,k) * p^k * (1-p)^(n-k), 0))
}
plot(ps, coverage_prob)
lines(ps, coverage_prob, col = "blue", type = "b", lty = 2)
abline(h=0.95, col="red")
n <- 100
k <- 0:n
phat <- k/n
ps <- seq(0, 1, 0.002)
coverage_prob = vector(length=length(ps))
for (i in 1:length(ps)) {
p = ps[i]
coverage_prob[i] = sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)),
choose(n,k) * p^k * (1-p)^(n-k), 0))
}
plot(ps, coverage_prob)
lines(ps, coverage_prob, col = "blue", type = "b", lty = 2)
abline(h=0.95, col="red")
n <- 30
k <- 0:n
phat <- k/n
ps <- seq(0, 1, 0.002)
coverage_prob = vector(length=length(ps))
for (i in 1:length(ps)) {
p = ps[i]
coverage_prob[i] = sum(ifelse(abs(phat - p) <= qt(0.975, n-1) * sqrt(phat*(1-phat)/(n-1)),
choose(n,k) * p^k * (1-p)^(n-k), 0))
}
plot(ps, coverage_prob)
lines(ps, coverage_prob, col = "blue", type = "b", lty = 2)
abline(h=0.95, col="red")
1 - pnorm(0.4)
?p.adjust
p.adjust(c(0.5, 0.4, 0.3, 0.4, 0.5))
p.adjust(c(0.5, 0.4, 0.3, 0.4, 0.5, 0.1, 0.1, 0.1))
p.adjust(c(0.5, 0.4, 0.3, 0.4, 0.5, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1))
p.adjust(c(0.5, 0.4, 0.3, 0.4, 0.5, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01))
p.adjust(c(0.5, 0.4, 0.3, 0.4, 0.5, 0.01, 0.01, 0.01, 0.01, 0.01, 0.02))
p.adjust(c(0.5, 0.4, 0.3, 0.4, 0.5, 0.01, 0.01, 0.01, 0.01, 0.01, 0.05))
p.adjust(c(0.5, 0.4, 0.3, 0.4, 0.5, 0.01, 0.01, 0.01, 0.01, 0.01, 0.05), method = "holm")
p.adjust(c(0.5, 0.4, 0.3, 0.4, 0.5, 0.01, 0.01, 0.01, 0.01, 0.01, 0.05), method = "hochberg")
p.adjust(c(0.5, 0.4, 0.3, 0.4, 0.5, 0.01, 0.01, 0.01, 0.01, 0.01, 0.05), method = "hommel")
p.adjust(c(0.5, 0.4, 0.3, 0.4, 0.5, 0.01, 0.01, 0.01, 0.01, 0.01, 0.05), method = "bonferroni")
p.adjust(c(0.5, 0.4, 0.3, 0.4, 0.5, 0.01, 0.01, 0.01, 0.01, 0.01, 0.05), method = "BH")
p.adjust(c(0.5, 0.4, 0.3, 0.4, 0.5, 0.01, 0.01, 0.01, 0.01, 0.01, 0.05), method = "BY")
p.adjust(c(0.5, 0.4, 0.3, 0.4, 0.5, 0.01, 0.01, 0.01, 0.01, 0.01, 0.05), method = "fdr")
p.adjust(c(0.5, 0.4, 0.3, 0.4, 0.5, 0.01, 0.01, 0.01, 0.01, 0.01, 0.05), method = "none")
pairwise.t.test(c(25,26,36,73,62,41,14,36,43,85,74,2,24), c(1,3,2,3,1,3,1,3,1,2,1,3,2))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
x <- rnorm(10000, 10, 3)
y <- rnorm(10000, 6, 2)
i_1 <- sample(c(0,1), 10000, replace = T)
i_2 <- sample(c(0,1), 10000, replace = T)
hist(x*i_1 + y*i_2)
library(MASS)
n = 50
Sigma = cbind(c(1,0.5), c(0.5, 1))
X <- mvrnorm(n, c(0,0), Sigma)
library(MASS)
n = 50
Sigma = cbind(c(1,0.5), c(0.5, 1))
X <- mvrnorm(n, c(0,0), Sigma)
Y <- c(1,3) %*% X + rnorm(n, 0, 1)
summary(lm(Y))
library(MASS)
n = 50
Sigma = cbind(c(1,0.5), c(0.5, 1))
X <- mvrnorm(n, c(0,0), Sigma)
Y <- t(c(1,3)) %*% X + rnorm(n, 0, 1)
summary(lm(Y ~ X))
X
c(1,3) %*% X
X %*% c(1,3)
library(MASS)
n = 50
Sigma = cbind(c(1,0.5), c(0.5, 1))
X <- mvrnorm(n, c(0,0), Sigma)
Y <- X %*% c(1,3) + rnorm(n, 0, 1)
summary(lm(Y ~ X))
library(MASS)
n = 50
Sigma = cbind(c(1,0.5), c(0.5, 1))
X <- mvrnorm(n, c(0,0), Sigma)
Y <- X %*% c(1,3) + rnorm(n, 0, 1)
lm_fit <- lm(Y ~ X)
summary(lm_fit)$coefficients
library(MASS)
n = 50
Sigma = cbind(c(1,0.5), c(0.5, 1))
X <- mvrnorm(n, c(0,0), Sigma)
Y <- X %*% c(1,3) + rnorm(n, 0, 1)
lm_fit <- lm(Y ~ X)
summary(lm_fit)$coefficients
lm_vcov <- vcov(lm_fit)
t(t(lm_vcov/sqrt(diag(lm_vcov))) /
sqrt(diag(lm_vcov)))[2:nrow(lm_vcov), 2:nrow(lm_vcov)]
library(MASS)
n = 50
Sigma = cbind(c(1,0.5), c(0.5, 1))
X <- mvrnorm(n, c(0,0), Sigma)
Y <- X %*% c(1,3) + rnorm(n, 0, 1)
lm_fit <- lm(Y ~ X)
summary(lm_fit)$coefficients
lm_vcov <- vcov(lm_fit)
t(t(lm_vcov/sqrt(diag(lm_vcov))) /
sqrt(diag(lm_vcov)))[2:nrow(lm_vcov), 2:nrow(lm_vcov)]
cor(X)
library(MASS)
n = 50
Sigma = cbind(c(1,0.5), c(0.5, 1))
X <- mvrnorm(n, c(0,0), Sigma)
Y <- X %*% c(1,3) + rnorm(n, 0, 1)
lm_fit <- lm(Y ~ X)
summary(lm_fit)$coefficients
lm_vcov <- vcov(lm_fit)
t(t(lm_vcov/sqrt(diag(lm_vcov))) /
sqrt(diag(lm_vcov)))[2:nrow(lm_vcov), 2:nrow(lm_vcov)]
cor(X)
library(MASS)
n = 50
Sigma = cbind(c(1,0.5), c(0.5, 1))
X <- mvrnorm(n, c(0,0), Sigma)
Y <- X %*% c(1,3) + rnorm(n, 0, 1)
lm_fit <- lm(Y ~ X)
summary(lm_fit)$coefficients
lm_vcov <- vcov(lm_fit)
t(t(lm_vcov/sqrt(diag(lm_vcov))) /
sqrt(diag(lm_vcov)))[2:nrow(lm_vcov), 2:nrow(lm_vcov)]
cor(X)
library(MASS)
n = 50
Sigma = cbind(c(1,0.5), c(0.5, 1))
X <- mvrnorm(n, c(0,0), Sigma)
Y <- X %*% c(1,3) + rnorm(n, 0, 1)
lm_fit <- lm(Y ~ X)
summary(lm_fit)$coefficients
lm_vcov <- vcov(lm_fit)
t(t(lm_vcov/sqrt(diag(lm_vcov))) /
sqrt(diag(lm_vcov)))[2:nrow(lm_vcov), 2:nrow(lm_vcov)]
cor(X)
library(MASS)
n = 50
Sigma = cbind(c(1,0.5), c(0.5, 1))
X <- mvrnorm(n, c(0,0), Sigma)
Y <- X %*% c(1,3) + rnorm(n, 0, 1)
lm_fit <- lm(Y ~ X)
summary(lm_fit)$coefficients
lm_vcov <- vcov(lm_fit)
t(t(lm_vcov/sqrt(diag(lm_vcov))) /
sqrt(diag(lm_vcov)))[2:nrow(lm_vcov), 2:nrow(lm_vcov)]
cor(X)
library(MASS)
n = 50
Sigma = cbind(c(1, 0.5, 0.5), c(0.5, 1, 0.5), c(0.5, 0.5, 1))
X <- mvrnorm(n, c(0,0,0), Sigma)
Y <- X %*% c(1,3,5) + rnorm(n, 0, 1)
lm_fit <- lm(Y ~ X)
summary(lm_fit)$coefficients
lm_vcov <- vcov(lm_fit)
t(t(lm_vcov/sqrt(diag(lm_vcov))) /
sqrt(diag(lm_vcov)))[2:nrow(lm_vcov), 2:nrow(lm_vcov)]
cor(X)
