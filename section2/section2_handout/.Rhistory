# T test
t.test(countries$mad_gdppc~countries$br_dem) # TODO
# Read in the data
countries <- read.csv("data/countries.csv", check.names = F)
# Distribution of GDP by democracy status
boxplot(mad_gdppc~as.factor(br_dem), countries)
# T test
t.test(countries$mad_gdppc~countries$br_dem) # TODO
summary(aov(mad_gdppc~factor(gol_inst), countries)) # TODO
summary(aov(mad_gdppc~factor(gol_inst), countries)) # TODO
boxplot(mad_gdppc~factor(gol_inst), countries)
by(countries$mad_gdppc, factor(countries$gol_inst), var,na.rm=T)/10^6
table(countries$gol_inst[!is.na(countries$mad_gdppc)])
table(factor(countries$br_dem),factor(countries$br_cw))
prop.test(table(factor(countries4br_dem),factor(countries$br_cw))), correct = F) # TODO
prop.test(table(factor(countries4br_dem),factor(countries$br_cw)), correct = F) # TODO
prop.test(table(factor(countries$br_dem),factor(countries$br_cw)), correct = F) # TODO
table(factor(countries$br_dem),factor(countries$br_cw))
library(ggplot2)
n = 10
beta = 1
nsim = 1000
paired_vec = vector(length = nsim)
unpaired_vec = vector(length = nsim)
for (i in 1:nsim) {
x = rnorm(n, 10, 3)
x_1 = x + rnorm(n, 5, 3)
x_2 = x + beta + rnorm(n, 0, 3)
paired_vec[i] = t.test(x_1, x_2, paired=T)$statistic # TODO: Get the paired t-test statistic
unpaired_vec[i] = t.test(x_1, x_2, paired=F)$statistic # TODO: Get the unpaired t-test statistic
}
df = data.frame("t-stat" = c(paired_vec, unpaired_vec),
"paired" = c(rep("Paired", nsim), rep("Unpaired", nsim)), check.names = F)
ggplot(df, aes(x=`t-stat`, fill=paired)) +
geom_histogram(alpha=0.4, position="identity") +
theme_bw()
f_correct[i] = summary(aov(x~beta, df))[[1]][1,'F value'] # TODO: Get the F statistic using the correct groups
nsim = 1000
n_1 = 10
n_2 = 30
n_3 = 6
betas = 1:n_1
f_correct = vector(length = nsim)
f_incorrect = vector(length = nsim)
for (i in 1:nsim) {
df = data.frame(matrix(nrow = 0, ncol = 0))
for (beta in betas) {
x = beta + rnorm(n_2, 0, 5)
df = rbind(df, cbind(x, beta))
}
df$beta <- as.factor(df$beta)
f_correct[i] = summary(aov(x~beta, df))[[1]][1,'F value'] # TODO: Get the F statistic using the correct groups
df$beta = as.numeric(as.character(df$beta))
df$beta = (df$beta - 1) * n_3 + rep(rep(0:(n_3-1), n_2/n_3), n_1)
df$beta <- as.factor(df$beta)
f_incorrect[i] = summary(aov(x~beta, df))[[1]][1,'F value'] # TODO: Get the F statistic using the incorrect groups
}
df = data.frame("f-stat" = c(f_correct, f_incorrect),
"split" = c(rep("Correct", nsim), rep("Incorrect", nsim)), check.names = F)
ggplot(df, aes(x=`f-stat`, fill=split)) +
geom_histogram(alpha=0.4, position="identity") +
theme_bw() + xlim(0, 30)
qf(seq(0,1), 3,3)
qf(seq(0,1, 0.001), 3,3)
qf(0.95, 3,3)
qf(0.95, 2, 2)
qf(0.95, 1000, 1)
qf(0.95, 1000, 1000)
par(mfrow=c(1,2))
set.seed(139)
n = 5
nsim = 100000
normal = vector(length = nsim)
for (i in 1:nsim) {
x = rnorm(n, 0, 1) # TODO: Simulate normals
normal[i] = t.test(x)$statistic # TODO: Get t-test p-values
}
hist(normal)
mean(normal<0.05)
expo = vector(length = nsim)
for (i in 1:nsim) {
x = rexp(n, 1) # TODO: Simulate exponentials
expo[i] = t.test(x)$statistic # TODO: Get t-test p-values
}
hist(expo)
mean(expo<0.05)
par(mfrow=c(1,2))
set.seed(139)
n = 1000
nsim = 100000
normal = vector(length = nsim)
for (i in 1:nsim) {
x = rnorm(n, 0, 1) # TODO: Simulate normals
normal[i] = t.test(x)$statistic # TODO: Get t-test p-values
}
hist(normal)
mean(normal<0.05)
expo = vector(length = nsim)
for (i in 1:nsim) {
x = rexp(n, 1) # TODO: Simulate exponentials
expo[i] = t.test(x)$statistic # TODO: Get t-test p-values
}
hist(expo)
mean(expo<0.05)
par(mfrow=c(1,2))
set.seed(139)
n = 1000
nsim = 100000
normal = vector(length = nsim)
for (i in 1:nsim) {
x = rnorm(n, 0, 1) # TODO: Simulate normals
normal[i] = t.test(x)$p.value # TODO: Get t-test p-values
}
hist(normal)
mean(normal<0.05)
expo = vector(length = nsim)
for (i in 1:nsim) {
x = rexp(n, 1) # TODO: Simulate exponentials
expo[i] = t.test(x)$p.value # TODO: Get t-test p-values
}
hist(expo)
mean(expo<0.05)
par(mfrow=c(1,2))
set.seed(139)
n = 1000
nsim = 100000
normal = vector(length = nsim)
for (i in 1:nsim) {
x = rnorm(n, 0, 1) # TODO: Simulate normals
normal[i] = t.test(x)$p.value # TODO: Get t-test p-values
}
hist(normal)
mean(normal<0.05)
expo = vector(length = nsim)
for (i in 1:nsim) {
x = rexp(n, 1) - 1 # TODO: Simulate exponentials
expo[i] = t.test(x)$p.value # TODO: Get t-test p-values
}
hist(expo)
mean(expo<0.05)
exp(0.2)
exp(0.8)
trump = read.csv("data/trumptweets.csv")
tempdate = as.Date(as.character(trump$date), "%m/%d/%y")
trump$date = tempdate
trump
tempdate = as.Date(as.character(trump$date), "%m/%d/%y")
tempdate
trump$date
trump = read.csv("data/trumptweets.csv")
tempdate = as.Date(as.character(trump$i..date), "%m/%d/%y")
trump$date = tempdate
trump$trump$i..date
trump$i..date
trump$ï..date
trump = read.csv("data/trumptweets.csv")
tempdate = as.Date(as.character(trump$ï..date), "%m/%d/%y")
trump$date = tempdate
trump$day = weekdays(trump$date)
table(trump$day)
hist(rlnorm(10000, 0, 1))
trump = read.csv("data/trumptweets.csv", check.names = F)
trump = read.csv("data/trumptweets.csv")
tempdate = as.Date(as.character(trump$ï..date), "%m/%d/%y")
trump$date = tempdate
trump$day = weekdays(trump$date)
table(trump$day)
[1:10]["a" = "a"]
[1:10]["a" == "a"]
.8*0.02/.0258
