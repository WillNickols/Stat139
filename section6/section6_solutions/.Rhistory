geom_point() +
theme_bw()
# Each group should have a negative slope with respect to some x
# There should be five groups such that their x and y means are increasing
n <- 1000
category <- sample(1:5, n, replace = T)
x <- rnorm(n, 4 * category, 3)
response = 12 - (2 * category) + x * 2 + rnorm(n, 0, 3)
df <- data.frame(x = x,
category = as.factor(category),
response = response)
ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw()
# Each group should have a negative slope with respect to some x
# There should be five groups such that their x and y means are increasing
n <- 1000
category <- sample(1:5, n, replace = T)
x <- rnorm(n, 10 * category, 3)
response = 12 - (2 * category) + x * 2 + rnorm(n, 0, 3)
df <- data.frame(x = x,
category = as.factor(category),
response = response)
ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw()
# Each group should have a negative slope with respect to some x
# There should be five groups such that their x and y means are increasing
n <- 1000
category <- sample(1:5, n, replace = T)
x <- rnorm(n, 10 * category, 3)
response = 100 - (10 * category) + x * 2 + rnorm(n, 0, 3)
df <- data.frame(x = x,
category = as.factor(category),
response = response)
ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw()
# Each group should have a negative slope with respect to some x
# There should be five groups such that their x and y means are increasing
n <- 1000
category <- sample(1:5, n, replace = T)
x <- rnorm(n, 10 * category, 3)
response = 100 - (20 * category) + x * 2 + rnorm(n, 0, 3)
df <- data.frame(x = x,
category = as.factor(category),
response = response)
ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw()
# Each group should have a negative slope with respect to some x
# There should be five groups such that their x and y means are increasing
n <- 1000
category <- sample(1:5, n, replace = T)
x <- rnorm(n, 10 * category, 3)
response = 100 - (30 * category) + x * 2 + rnorm(n, 0, 3)
df <- data.frame(x = x,
category = as.factor(category),
response = response)
ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw()
# Each group should have a negative slope with respect to some x
# There should be five groups such that their x and y means are increasing
n <- 1000
category <- sample(1:5, n, replace = T)
x <- rnorm(n, 10 * category, 3)
response = 100 - (40 * category) + x * 2 + rnorm(n, 0, 3)
df <- data.frame(x = x,
category = as.factor(category),
response = response)
ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw()
# Each group should have a negative slope with respect to some x
# There should be five groups such that their x and y means are increasing
n <- 1000
category <- sample(1:5, n, replace = T)
x <- rnorm(n, 10 * category, 5)
response = 100 - (40 * category) + x * 2 + rnorm(n, 0, 5)
df <- data.frame(x = x,
category = as.factor(category),
response = response)
ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw()
# Each group should have a negative slope with respect to some x
# There should be five groups such that their x and y means are increasing
n <- 1000
category <- sample(1:5, n, replace = T)
x <- rnorm(n, 10 * category, 10)
response = 100 - (40 * category) + x * 2 + rnorm(n, 0, 5)
df <- data.frame(x = x,
category = as.factor(category),
response = response)
ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw()
# Each group should have a negative slope with respect to some x
# There should be five groups such that their x and y means are increasing
n <- 1000
category <- sample(1:5, n, replace = T)
x <- rnorm(n, 10 * category, 15)
response = 100 - (40 * category) + x * 1 + rnorm(n, 0, 15)
df <- data.frame(x = x,
category = as.factor(category),
response = response)
ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw()
# Each group should have a negative slope with respect to some x
# There should be five groups such that their x and y means are increasing
n <- 1000
category <- sample(1:5, n, replace = T)
x <- rnorm(n, 10 * category, 15)
response = 100 - (40 * category) + x * 1 + rnorm(n, 0, 15)
df <- data.frame(x = x,
category = as.factor(category),
response = response)
ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw()
summary(lm(response ~ x, df))
# Each group should have a negative slope with respect to some x
# There should be five groups such that their x and y means are increasing
n <- 1000
category <- sample(1:5, n, replace = T)
x <- rnorm(n, 10 * category, 15)
response = 100 - (40 * category) + x * 1 + rnorm(n, 0, 15)
df <- data.frame(x = x,
category = as.factor(category),
response = response)
ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw()
summary(lm(response ~ x + category, df))
# Each group should have a negative slope with respect to some x
# There should be five groups such that their x and y means are increasing
n <- 1000
category <- sample(0:1, n, replace = T)
x <- rnorm(n, 0, 15)
response = x * (-3 + 6 * category) + rnorm(0, 15)
df <- data.frame(x = x,
category = as.factor(category),
response = response)
n <- 1000
category <- sample(0:1, n, replace = T)
x <- rnorm(n, 0, 15)
response = x * (-3 + 6 * category) + rnorm(n, 0, 15)
df <- data.frame(x = x,
category = as.factor(category),
response = response)
ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw()
summary(lm(response ~ x + category, df))
n <- 1000
category <- sample(0:1, n, replace = T)
x <- rnorm(n, 0, 15)
response = x * (-3 + 6 * category) + rnorm(n, 0, 30)
df <- data.frame(x = x,
category = as.factor(category),
response = response)
ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw()
summary(lm(response ~ x + category, df))
n <- 1000
category <- sample(0:1, n, replace = T)
x <- rnorm(n, 0, 15)
response = x * (-1 + 2 * category) + rnorm(n, 0, 30)
df <- data.frame(x = x,
category = as.factor(category),
response = response)
ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw()
summary(lm(response ~ x + category, df))
n <- 1000
category <- sample(0:1, n, replace = T)
x <- rnorm(n, 0, 15)
response = x * (-2 + 4 * category) + rnorm(n, 0, 30)
df <- data.frame(x = x,
category = as.factor(category),
response = response)
ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw()
summary(lm(response ~ x + category, df))
n <- 1000
category <- sample(0:1, n, replace = T)
x <- rnorm(n, 0, 15)
response = x * (-1 + 2 * category) + rnorm(n, 0, 15)
df <- data.frame(x = x,
category = as.factor(category),
response = response)
ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw()
summary(lm(response ~ x + category, df))
plot1 <- ggplot(df, aes(x = x, y = response)) +
geom_point() +
theme_bw()
plot1
grid.arrange(plot1, plot2)
library(gridExtra)
grid.arrange(plot1, plot2)
plot2 <- ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw()
grid.arrange(plot1, plot2)
grid.arrange(plot1, plot2, ncol = 2)
plot1 <- ggplot(df, aes(x = x, y = response)) +
geom_point() +
theme_bw()
library(gridExtra)
n <- 1000
category <- sample(1:5, n, replace = T)
x <- rnorm(n, 10 * category, 15)
response = 100 - (40 * category) + x * 1 + rnorm(n, 0, 15)
df <- data.frame(x = x,
category = as.factor(category),
response = response)
plot1 <- ggplot(df, aes(x = x, y = response)) +
geom_point() +
theme_bw()
plot2 <- ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw()
grid.arrange(plot1, plot2, ncol = 2)
summary(lm(response ~ x + category, df))
plot1 <- ggplot(df, aes(x = x, y = response)) +
geom_point() +
theme_bw() +
geom_smooth(method="lm")
library(gridExtra)
n <- 1000
category <- sample(1:5, n, replace = T)
x <- rnorm(n, 10 * category, 15)
response = 100 - (40 * category) + x * 1 + rnorm(n, 0, 15)
df <- data.frame(x = x,
category = as.factor(category),
response = response)
plot1 <- ggplot(df, aes(x = x, y = response)) +
geom_point() +
theme_bw() +
geom_smooth(method="lm")
plot2 <- ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw()
grid.arrange(plot1, plot2, ncol = 2)
summary(lm(response ~ x + category, df))
plot1 <- ggplot(df, aes(x = x, y = response)) +
geom_point() +
theme_bw() +
geom_smooth(method="lm", formula = y~x)
plot2 <- ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw()
grid.arrange(plot1, plot2, ncol = 2)
plot2 <- ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw() +
geom_smooth(method="lm", formula = y~x)
grid.arrange(plot1, plot2, ncol = 2)
n <- 1000
category <- sample(0:1, n, replace = T)
x <- rnorm(n, 0, 15)
response = x * (-1 + 2 * category) + rnorm(n, 0, 15)
df <- data.frame(x = x,
category = as.factor(category),
response = response)
plot1 <- ggplot(df, aes(x = x, y = response)) +
geom_point() +
theme_bw() +
geom_smooth(method="lm", formula = y~x)
plot2 <- ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw() +
geom_smooth(method="lm", formula = y~x)
grid.arrange(plot1, plot2, ncol = 2)
summary(lm(response ~ x + category, df))
summary(lm(response ~ x + category, df))
library(gridExtra)
n <- 1000
category <- sample(1:5, n, replace = T)
x <- rnorm(n, 10 * category, 15)
response = 100 - (40 * category) + x * 1 + rnorm(n, 0, 15)
df <- data.frame(x = x,
category = as.factor(category),
response = response)
plot1 <- ggplot(df, aes(x = x, y = response)) +
geom_point() +
theme_bw() +
geom_smooth(method="lm", formula = y~x)
plot2 <- ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw() +
geom_smooth(method="lm", formula = y~x)
grid.arrange(plot1, plot2, ncol = 2)
summary(lm(response ~ x + category, df))
threshold = 10
pt((threshold - C %*% coef(lm2)) /
(sqrt(t(C) %*% vcov(lm2) %*% C + summary(lm2)$sigma^2)),
lm2$df.residual)
# Check that this works as intended
predict(lm2,newdata = data.frame(wdi_precip=1500),interval = "prediction")
threshold = c(-7.61454, 44.1593)
pt((threshold - as.vector(C %*% coef(lm2))) /
as.vector(sqrt(t(C) %*% vcov(lm2) %*% C + summary(lm2)$sigma^2)),
lm2$df.residual)
tmp <- model.matrix(lm_sim)
class(tmp)
tmp
attr(tmp)
attr(tmp, 1)
attr(tmp, "contrasts")
attr(tmp, "assign")
lm_sim <- lm(Response ~ Category * Value, df)
set.seed(139)
library(knitr)
library(dplyr)
n = 10
value = rnorm(n, 5, 2)
category = as.factor(sample(c(1,2,3), n, replace = T))
df <- data.frame(Response = case_when(category == "1" ~ 3,
category == "2" ~ 7,
category == "3" ~ 2) * value + rnorm(n, 0, 5),
Category=category,
Value=value)
kable(df)
lm_sim <- lm(Response ~ Category * Value, df)
model_matrix_out = model.matrix(lm_sim)
attr(model_matrix_out) <- NULL
model_matrix_out
attr(model_matrix_out, c("assign", "contrasts")) <- NULL
print(model_matrix_out)
lm_sim <- lm(Response ~ Category * Value, df)
model_matrix_out = model.matrix(lm_sim)
attr(model_matrix_out, "assign") <- NULL
attr(model_matrix_out, "contrasts") <- NULL
print(model_matrix_out)
summary(lm_sim)$coefficients
n <- 1000
# Two categories
category <- sample(0:1, n, replace = T)
# Generate predictor
x <- rnorm(n, 0, 15)
# Generate response variable
response = x * (-1 + 2 * category) + rnorm(n, 0, 15)
# Data frame for plotting
df <- data.frame(x = x,
category = as.factor(category),
response = response)
# Models with and without interaction terms
plot1 <- ggplot(df, aes(x = x, y = response)) +
geom_point() +
theme_bw() +
geom_smooth(method="lm", formula = y~x)
plot2 <- ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw() +
geom_smooth(method="lm", formula = y~x)
grid.arrange(plot1, plot2, ncol = 2, widths=c(0.8,1))
# Correctly fit model
summary(lm(response ~ x + category, df))$coefficients
df
summary(lm(response ~ x + category, df))
n <- 1000
# Two categories
category <- sample(0:1, n, replace = T)
# Generate predictor
x <- rnorm(n, 0, 15)
# Generate response variable
response = x * (-1 + 2 * category) + rnorm(n, 0, 15)
# Data frame for plotting
df <- data.frame(x = x,
category = as.factor(category),
response = response)
# Models with and without interaction terms
plot1 <- ggplot(df, aes(x = x, y = response)) +
geom_point() +
theme_bw() +
geom_smooth(method="lm", formula = y~x)
plot2 <- ggplot(df, aes(x = x, y = response, color = category)) +
geom_point() +
theme_bw() +
geom_smooth(method="lm", formula = y~x)
grid.arrange(plot1, plot2, ncol = 2, widths=c(0.8,1))
# Correctly fit model
summary(lm(response ~ x * category, df))$coefficients
countries <- read.csv("data/countries.csv")
countries$ht_region <- as.factor(countries$ht_region)
countries$ht_region <- relevel(countries$ht_region, ref = "5")
summary(lm(mad_gdppc~ht_region, countries))$coefficients
lm2 <- lm(wdi_araland~poly(wdi_precip, 2, raw = TRUE), countries)
summary(lm2)
summary(lm3)
lm3 <- lm(wdi_araland~I(wdi_precip^2), countries)
summary(lm3)
lm2 <- lm(wdi_araland~poly(wdi_precip, 2, raw = TRUE), countries)
lm3 <- lm(wdi_araland~I(wdi_precip^2), countries)
summary(lm2)
summary(lm3)
ggplot(countries, aes(x=wdi_precip, y=wdi_araland)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ poly(x, 2)) +
stat_smooth(method = "lm",
formula = y ~ I(x^2)) +
ylim(0, 60) +
theme_bw()
library(ggplot2)
lm2 <- lm(wdi_araland~poly(wdi_precip, 2, raw = TRUE), countries)
lm3 <- lm(wdi_araland~I(wdi_precip^2), countries)
summary(lm2)
summary(lm3)
ggplot(countries, aes(x=wdi_precip, y=wdi_araland)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ poly(x, 2)) +
stat_smooth(method = "lm",
formula = y ~ I(x^2)) +
ylim(0, 60) +
theme_bw()
ggplot(countries, aes(x=wdi_precip, y=wdi_araland)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ poly(x, 2)) +
stat_smooth(method = "lm",
formula = y ~ I(x^2)) +
ylim(0, 60) +
xlim(-1000, 1000) +
theme_bw()
ggplot(countries, aes(x=wdi_precip, y=wdi_araland)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ poly(x, 2)) +
stat_smooth(method="loess",
formula = y ~ x,
col="red") +
ylim(0, 60) +
theme_bw()
ggplot(countries, aes(x=wdi_precip, y=wdi_araland)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ poly(x, 2)) +
stat_smooth(method = "lm",
formula = y ~ I(x^2)) +
ylim(0, 60) +
xlim(-3000, 3000) +
theme_bw()
lm4 <- lm(spi_ospi~log(mad_gdppc, 2) + as.factor(bmr_dem), countries)
anova(lm4, lm3)
countries <- read.csv("data/countries.csv")
countries$ht_region <- as.factor(countries$ht_region)
countries$ht_region <- relevel(countries$ht_region, ref = "5")
summary(lm(mad_gdppc~ht_region, countries))$coefficients
library(ggplot2)
lm2 <- lm(wdi_araland~poly(wdi_precip, 2, raw = TRUE), countries)
lm3 <- lm(wdi_araland~I(wdi_precip^2), countries)
summary(lm2)
summary(lm3)
ggplot(countries, aes(x=wdi_precip, y=wdi_araland)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ poly(x, 2)) +
stat_smooth(method = "lm",
formula = y ~ I(x^2)) +
ylim(0, 60) +
xlim(-3000, 3000) +
theme_bw()
threshold = 10
C = c(1, 1500, 1500^2)
# Using the null distribution, we can standardize the threshold and find the density below it
pt((threshold - C %*% coef(lm2)) /
(sqrt(t(C) %*% vcov(lm2) %*% C + summary(lm2)$sigma^2)),
lm2$df.residual)
# Check that this works as intended
predict(lm2,newdata = data.frame(wdi_precip=1500),interval = "prediction")
threshold = c(-7.61454, 44.1593)
# These should threshold above 0.025 and 0.975 density
pt((threshold - as.vector(C %*% coef(lm2))) /
as.vector(sqrt(t(C) %*% vcov(lm2) %*% C + summary(lm2)$sigma^2)),
lm2$df.residual)
loess_model <- loess(wdi_araland~wdi_precip, countries)
# LM Rsq
1-sum(residuals(lm2)^2)/
sum((countries[!is.na(countries$wdi_araland) & !is.na(countries$wdi_precip),]$wdi_araland -
mean(countries[!is.na(countries$wdi_araland) & !is.na(countries$wdi_precip),]$wdi_araland))^2)
# Loess Rsq
1-sum(residuals(loess_model)^2)/
sum((countries[!is.na(countries$wdi_araland) & !is.na(countries$wdi_precip),]$wdi_araland -
mean(countries[!is.na(countries$wdi_araland) & !is.na(countries$wdi_precip),]$wdi_araland))^2)
ggplot(countries, aes(x=wdi_precip, y=wdi_araland)) +
geom_point() +
stat_smooth(method = "lm",
formula = y ~ poly(x, 2)) +
stat_smooth(method="loess",
formula = y ~ x,
col="red") +
ylim(0, 60) +
theme_bw()
lm3 <- lm(spi_ospi~log(mad_gdppc, 2) * as.factor(bmr_dem), countries)
summary(lm3)$coefficients
ggplot(countries, aes(x=log(mad_gdppc, 2), y = spi_ospi, col = as.factor(bmr_dem))) +
geom_point() +
stat_smooth(method="lm",
formula = y~x)
log(median(countries$mad_gdppc, na.rm = T))
lm4 <- lm(spi_ospi~log(mad_gdppc, 2) + as.factor(bmr_dem), countries)
anova(lm4, lm3)
